/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import DAO.ProdutoDAO;
import Modelo.Produto;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class Pesquisa_Produto extends javax.swing.JInternalFrame {

    /**
     * Creates new form Pesquisa_Produto
     */
    DefaultTableModel tmProduto = new DefaultTableModel(null, new String[]{"Código", "Produto", "Marca", "Qnt. Pacote", "Qnt. Produto", "Valor Compra", "Valor Venda", "Data Compra", "Vencimento", "Lote", "OBS", "Categoria"});
    List<Produto> produtos;
    ListSelectionModel lsmProduto;

    public Pesquisa_Produto() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Tabela = new javax.swing.JTable();
        jLCabecalho = new javax.swing.JLabel();
        jRBVencimento = new javax.swing.JRadioButton();
        jRBEstoque = new javax.swing.JRadioButton();
        jRBCategoria = new javax.swing.JRadioButton();
        jCBCategoria = new javax.swing.JComboBox();
        jRBCodigo = new javax.swing.JRadioButton();
        jTCodigo = new javax.swing.JTextField();

        setClosable(true);

        Tabela.setModel(tmProduto);
        jScrollPane1.setViewportView(Tabela);

        jLCabecalho.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLCabecalho.setText("Pesquisa de Produtos");

        jRBVencimento.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRBVencimento.setText("Vencimento");
        jRBVencimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBVencimentoActionPerformed(evt);
            }
        });

        jRBEstoque.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRBEstoque.setText("Qnt. Estoque");
        jRBEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBEstoqueActionPerformed(evt);
            }
        });

        jRBCategoria.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRBCategoria.setText("Categoria");
        jRBCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBCategoriaActionPerformed(evt);
            }
        });

        jCBCategoria.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCBCategoria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Alimentos", "Limpeza" }));
        jCBCategoria.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBCategoriaItemStateChanged(evt);
            }
        });

        jRBCodigo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRBCodigo.setText("Código");
        jRBCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBCodigoActionPerformed(evt);
            }
        });

        jTCodigo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 991, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jRBVencimento)
                            .addComponent(jRBEstoque, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRBCategoria)
                            .addComponent(jCBCategoria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRBCodigo)
                            .addComponent(jTCodigo)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(381, 381, 381)
                        .addComponent(jLCabecalho)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLCabecalho)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRBVencimento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRBEstoque)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRBCategoria)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCBCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jRBCodigo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRBVencimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBVencimentoActionPerformed
        if (jRBVencimento.isSelected()) {
            jRBCodigo.setSelected(false);
            jRBEstoque.setSelected(false);
            jRBCategoria.setSelected(false);


            try {
                ProdutoDAO pdao = new ProdutoDAO();
                produtos = pdao.listarVencimento();

                while (tmProduto.getRowCount() > 0) {
                    tmProduto.removeRow(0);
                }

                String[] linha = new String[]{null, null, null, null};
                for (int i = 0; i < produtos.size(); i++) {

                    tmProduto.addRow(linha);
                    tmProduto.setValueAt(produtos.get(i).getCodigo(), i, 0);
                    tmProduto.setValueAt(produtos.get(i).getNome(), i, 1);
                    tmProduto.setValueAt(produtos.get(i).getMarca(), i, 2);
                    tmProduto.setValueAt(produtos.get(i).getQuant_pacote(), i, 3);
                    tmProduto.setValueAt(produtos.get(i).getQuant_itens(), i, 4);
                    tmProduto.setValueAt(format(produtos.get(i).getValor_compra()), i, 5);
                    tmProduto.setValueAt(format(produtos.get(i).getValor_venda()), i, 6);
                    tmProduto.setValueAt(formatData(produtos.get(i).getData_compra()), i, 7);
                    if (produtos.get(i).getData_vencimento() == null) {
                        tmProduto.setValueAt(null, i, 8);
                    } else {
                        tmProduto.setValueAt(formatData(produtos.get(i).getData_vencimento()), i, 8);
                    }
                    tmProduto.setValueAt(produtos.get(i).getLote(), i, 9);
                    tmProduto.setValueAt(produtos.get(i).getObs(), i, 10);
                    tmProduto.setValueAt(produtos.get(i).getCategoria(), i, 11);

                }
            } catch (SQLException ex) {
                Logger.getLogger(Pesquisa_Produto.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jRBVencimentoActionPerformed

    private void jRBEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBEstoqueActionPerformed
        if (jRBEstoque.isSelected()) {
            jRBCategoria.setSelected(false);
            jRBCodigo.setSelected(false);
            jRBVencimento.setSelected(false);
            try {
                ProdutoDAO pdao = new ProdutoDAO();
                produtos = pdao.listarQuantidade();

                while (tmProduto.getRowCount() > 0) {
                    tmProduto.removeRow(0);
                }

                String[] linha = new String[]{null, null, null, null};
                for (int i = 0; i < produtos.size(); i++) {

                    tmProduto.addRow(linha);
                    tmProduto.setValueAt(produtos.get(i).getCodigo(), i, 0);
                    tmProduto.setValueAt(produtos.get(i).getNome(), i, 1);
                    tmProduto.setValueAt(produtos.get(i).getMarca(), i, 2);
                    tmProduto.setValueAt(produtos.get(i).getQuant_pacote(), i, 3);
                    tmProduto.setValueAt(produtos.get(i).getQuant_itens(), i, 4);
                    tmProduto.setValueAt(format(produtos.get(i).getValor_compra()), i, 5);
                    tmProduto.setValueAt(format(produtos.get(i).getValor_venda()), i, 6);
                    tmProduto.setValueAt(formatData(produtos.get(i).getData_compra()), i, 7);
                    if (produtos.get(i).getData_vencimento() == null) {
                        tmProduto.setValueAt(null, i, 8);
                    } else {
                        tmProduto.setValueAt(formatData(produtos.get(i).getData_vencimento()), i, 8);
                    }
                    tmProduto.setValueAt(produtos.get(i).getLote(), i, 9);
                    tmProduto.setValueAt(produtos.get(i).getObs(), i, 10);
                    tmProduto.setValueAt(produtos.get(i).getCategoria(), i, 11);

                }
            } catch (SQLException ex) {
                Logger.getLogger(Pesquisa_Produto.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jRBEstoqueActionPerformed

    private void jRBCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBCategoriaActionPerformed
        if (jRBCategoria.isSelected()) {
            jRBCodigo.setSelected(false);
            jRBEstoque.setSelected(false);
            jRBVencimento.setSelected(false);
            try {
                ProdutoDAO pdao = new ProdutoDAO();
                produtos = pdao.listarCategoria((String) jCBCategoria.getSelectedItem());

                while (tmProduto.getRowCount() > 0) {
                    tmProduto.removeRow(0);
                }

                String[] linha = new String[]{null, null, null, null};
                for (int i = 0; i < produtos.size(); i++) {

                    tmProduto.addRow(linha);
                    tmProduto.setValueAt(produtos.get(i).getCodigo(), i, 0);
                    tmProduto.setValueAt(produtos.get(i).getNome(), i, 1);
                    tmProduto.setValueAt(produtos.get(i).getMarca(), i, 2);
                    tmProduto.setValueAt(produtos.get(i).getQuant_pacote(), i, 3);
                    tmProduto.setValueAt(produtos.get(i).getQuant_itens(), i, 4);
                    tmProduto.setValueAt(format(produtos.get(i).getValor_compra()), i, 5);
                    tmProduto.setValueAt(format(produtos.get(i).getValor_venda()), i, 6);
                    tmProduto.setValueAt(formatData(produtos.get(i).getData_compra()), i, 7);
                    if (produtos.get(i).getData_vencimento() == null) {
                        tmProduto.setValueAt(null, i, 8);
                    } else {
                        tmProduto.setValueAt(formatData(produtos.get(i).getData_vencimento()), i, 8);
                    }
                    tmProduto.setValueAt(produtos.get(i).getLote(), i, 9);
                    tmProduto.setValueAt(produtos.get(i).getObs(), i, 10);
                    tmProduto.setValueAt(produtos.get(i).getCategoria(), i, 11);

                }
            } catch (SQLException ex) {
                Logger.getLogger(Pesquisa_Produto.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jRBCategoriaActionPerformed

    private void jRBCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBCodigoActionPerformed
        if (jRBCodigo.isSelected()) {
            jRBCategoria.setSelected(false);
            jRBEstoque.setSelected(false);
            jRBVencimento.setSelected(false);
            try {
                ProdutoDAO pdao = new ProdutoDAO();
                produtos = pdao.listarCodigo(jTCodigo.getText());

                while (tmProduto.getRowCount() > 0) {
                    tmProduto.removeRow(0);
                }

                String[] linha = new String[]{null, null, null, null};
                for (int i = 0; i < produtos.size(); i++) {

                    tmProduto.addRow(linha);
                    tmProduto.setValueAt(produtos.get(i).getCodigo(), i, 0);
                    tmProduto.setValueAt(produtos.get(i).getNome(), i, 1);
                    tmProduto.setValueAt(produtos.get(i).getMarca(), i, 2);
                    tmProduto.setValueAt(produtos.get(i).getQuant_pacote(), i, 3);
                    tmProduto.setValueAt(produtos.get(i).getQuant_itens(), i, 4);
                    tmProduto.setValueAt(format(produtos.get(i).getValor_compra()), i, 5);
                    tmProduto.setValueAt(format(produtos.get(i).getValor_venda()), i, 6);
                    tmProduto.setValueAt(formatData(produtos.get(i).getData_compra()), i, 7);
                    if (produtos.get(i).getData_vencimento() == null) {
                        tmProduto.setValueAt(null, i, 8);
                    } else {
                        tmProduto.setValueAt(formatData(produtos.get(i).getData_vencimento()), i, 8);
                    }
                    tmProduto.setValueAt(produtos.get(i).getLote(), i, 9);
                    tmProduto.setValueAt(produtos.get(i).getObs(), i, 10);
                    tmProduto.setValueAt(produtos.get(i).getCategoria(), i, 11);

                }
            } catch (SQLException ex) {
                Logger.getLogger(Pesquisa_Produto.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jRBCodigoActionPerformed

    private void jCBCategoriaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBCategoriaItemStateChanged
        if (jRBCategoria.isSelected()) {
            jRBCodigo.setSelected(false);
            jRBEstoque.setSelected(false);
            jRBVencimento.setSelected(false);
            try {
                ProdutoDAO pdao = new ProdutoDAO();
                produtos = pdao.listarCategoria((String) jCBCategoria.getSelectedItem());

                while (tmProduto.getRowCount() > 0) {
                    tmProduto.removeRow(0);
                }

                String[] linha = new String[]{null, null, null, null};
                for (int i = 0; i < produtos.size(); i++) {

                    tmProduto.addRow(linha);
                    tmProduto.setValueAt(produtos.get(i).getCodigo(), i, 0);
                    tmProduto.setValueAt(produtos.get(i).getNome(), i, 1);
                    tmProduto.setValueAt(produtos.get(i).getMarca(), i, 2);
                    tmProduto.setValueAt(produtos.get(i).getQuant_pacote(), i, 3);
                    tmProduto.setValueAt(produtos.get(i).getQuant_itens(), i, 4);
                    tmProduto.setValueAt(format(produtos.get(i).getValor_compra()), i, 5);
                    tmProduto.setValueAt(format(produtos.get(i).getValor_venda()), i, 6);
                    tmProduto.setValueAt(formatData(produtos.get(i).getData_compra()), i, 7);
                    if (produtos.get(i).getData_vencimento() == null) {
                        tmProduto.setValueAt(null, i, 8);
                    } else {
                        tmProduto.setValueAt(formatData(produtos.get(i).getData_vencimento()), i, 8);
                    }
                    tmProduto.setValueAt(produtos.get(i).getLote(), i, 9);
                    tmProduto.setValueAt(produtos.get(i).getObs(), i, 10);
                    tmProduto.setValueAt(produtos.get(i).getCategoria(), i, 11);

                }
            } catch (SQLException ex) {
                Logger.getLogger(Pesquisa_Produto.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_jCBCategoriaItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tabela;
    private javax.swing.JComboBox jCBCategoria;
    private javax.swing.JLabel jLCabecalho;
    private javax.swing.JRadioButton jRBCategoria;
    private javax.swing.JRadioButton jRBCodigo;
    private javax.swing.JRadioButton jRBEstoque;
    private javax.swing.JRadioButton jRBVencimento;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTCodigo;
    // End of variables declaration//GEN-END:variables

    public static String format(double x) {
        return String.format("R$ %.2f", x);
    }

    public static String formatData(java.util.Date d) {
        String aux, aux2 = "";
        Calendar cal = Calendar.getInstance();
        cal.setTime(d);
        int ano = cal.get(Calendar.YEAR);
        int mes = cal.get(Calendar.MONTH) + 1;
        int dia = cal.get(Calendar.DAY_OF_MONTH);
        if (mes < 10) {
            aux = "0" + String.valueOf(mes);
        } else {
            aux = String.valueOf(mes);
        }
        if (dia < 10) {
            aux2 = "0" + String.valueOf(dia);
        } else {
            aux2 = String.valueOf(dia);
        }
        String sData = aux2 + "/" + aux + "/" + String.valueOf(ano);
        return sData;
    }
}
